/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** MissingSigner: Missing signer */
export class MissingSignerError extends ProgramError {
  readonly name: string = 'MissingSigner';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super('Missing signer', program, cause);
  }
}
codeToErrorMap.set(0x0, MissingSignerError);
nameToErrorMap.set('MissingSigner', MissingSignerError);

/** AccountSpaceNotAllocated: Account space not allocated */
export class AccountSpaceNotAllocatedError extends ProgramError {
  readonly name: string = 'AccountSpaceNotAllocated';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Account space not allocated', program, cause);
  }
}
codeToErrorMap.set(0x1, AccountSpaceNotAllocatedError);
nameToErrorMap.set('AccountSpaceNotAllocated', AccountSpaceNotAllocatedError);

/** InvalidAccountType: InvalidAccountType */
export class InvalidAccountTypeError extends ProgramError {
  readonly name: string = 'InvalidAccountType';

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super('InvalidAccountType', program, cause);
  }
}
codeToErrorMap.set(0x2, InvalidAccountTypeError);
nameToErrorMap.set('InvalidAccountType', InvalidAccountTypeError);

/** InvalidOwner: Account has an invalid owner */
export class InvalidOwnerError extends ProgramError {
  readonly name: string = 'InvalidOwner';

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super('Account has an invalid owner', program, cause);
  }
}
codeToErrorMap.set(0x3, InvalidOwnerError);
nameToErrorMap.set('InvalidOwner', InvalidOwnerError);

/** InvalidAccountSize: Invalid account size */
export class InvalidAccountSizeError extends ProgramError {
  readonly name: string = 'InvalidAccountSize';

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super('Invalid account size', program, cause);
  }
}
codeToErrorMap.set(0x4, InvalidAccountSizeError);
nameToErrorMap.set('InvalidAccountSize', InvalidAccountSizeError);

/** InvalidSystemProgramAccount: Invalid system program account */
export class InvalidSystemProgramAccountError extends ProgramError {
  readonly name: string = 'InvalidSystemProgramAccount';

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super('Invalid system program account', program, cause);
  }
}
codeToErrorMap.set(0x5, InvalidSystemProgramAccountError);
nameToErrorMap.set(
  'InvalidSystemProgramAccount',
  InvalidSystemProgramAccountError
);

/** AuctionEnded: Auction ended */
export class AuctionEndedError extends ProgramError {
  readonly name: string = 'AuctionEnded';

  readonly code: number = 0x6; // 6

  constructor(program: Program, cause?: Error) {
    super('Auction ended', program, cause);
  }
}
codeToErrorMap.set(0x6, AuctionEndedError);
nameToErrorMap.set('AuctionEnded', AuctionEndedError);

/** AmountTooLow: Amount is too low */
export class AmountTooLowError extends ProgramError {
  readonly name: string = 'AmountTooLow';

  readonly code: number = 0x7; // 7

  constructor(program: Program, cause?: Error) {
    super('Amount is too low', program, cause);
  }
}
codeToErrorMap.set(0x7, AmountTooLowError);
nameToErrorMap.set('AmountTooLow', AmountTooLowError);

/** AddBidFailed: Could not add a bid */
export class AddBidFailedError extends ProgramError {
  readonly name: string = 'AddBidFailed';

  readonly code: number = 0x8; // 8

  constructor(program: Program, cause?: Error) {
    super('Could not add a bid', program, cause);
  }
}
codeToErrorMap.set(0x8, AddBidFailedError);
nameToErrorMap.set('AddBidFailed', AddBidFailedError);

/** NumericalOverflow: NumericalOverflowError */
export class NumericalOverflowError extends ProgramError {
  readonly name: string = 'NumericalOverflow';

  readonly code: number = 0x9; // 9

  constructor(program: Program, cause?: Error) {
    super('NumericalOverflowError', program, cause);
  }
}
codeToErrorMap.set(0x9, NumericalOverflowError);
nameToErrorMap.set('NumericalOverflow', NumericalOverflowError);

/** BidAccountAlreadyExists: Bid account already exists */
export class BidAccountAlreadyExistsError extends ProgramError {
  readonly name: string = 'BidAccountAlreadyExists';

  readonly code: number = 0xa; // 10

  constructor(program: Program, cause?: Error) {
    super('Bid account already exists', program, cause);
  }
}
codeToErrorMap.set(0xa, BidAccountAlreadyExistsError);
nameToErrorMap.set('BidAccountAlreadyExists', BidAccountAlreadyExistsError);

/** InvalidDerivation: Invalid account key derivation */
export class InvalidDerivationError extends ProgramError {
  readonly name: string = 'InvalidDerivation';

  readonly code: number = 0xb; // 11

  constructor(program: Program, cause?: Error) {
    super('Invalid account key derivation', program, cause);
  }
}
codeToErrorMap.set(0xb, InvalidDerivationError);
nameToErrorMap.set('InvalidDerivation', InvalidDerivationError);

/** InvalidBidAmount: Bid amount can only increase */
export class InvalidBidAmountError extends ProgramError {
  readonly name: string = 'InvalidBidAmount';

  readonly code: number = 0xc; // 12

  constructor(program: Program, cause?: Error) {
    super('Bid amount can only increase', program, cause);
  }
}
codeToErrorMap.set(0xc, InvalidBidAmountError);
nameToErrorMap.set('InvalidBidAmount', InvalidBidAmountError);

/** MissingBidAccount: Missing bid account */
export class MissingBidAccountError extends ProgramError {
  readonly name: string = 'MissingBidAccount';

  readonly code: number = 0xd; // 13

  constructor(program: Program, cause?: Error) {
    super('Missing bid account', program, cause);
  }
}
codeToErrorMap.set(0xd, MissingBidAccountError);
nameToErrorMap.set('MissingBidAccount', MissingBidAccountError);

/** InvalidAccountKeyValue: Invalid account key value */
export class InvalidAccountKeyValueError extends ProgramError {
  readonly name: string = 'InvalidAccountKeyValue';

  readonly code: number = 0xe; // 14

  constructor(program: Program, cause?: Error) {
    super('Invalid account key value', program, cause);
  }
}
codeToErrorMap.set(0xe, InvalidAccountKeyValueError);
nameToErrorMap.set('InvalidAccountKeyValue', InvalidAccountKeyValueError);

/** AuctionInProgress: Auction is in progress */
export class AuctionInProgressError extends ProgramError {
  readonly name: string = 'AuctionInProgress';

  readonly code: number = 0xf; // 15

  constructor(program: Program, cause?: Error) {
    super('Auction is in progress', program, cause);
  }
}
codeToErrorMap.set(0xf, AuctionInProgressError);
nameToErrorMap.set('AuctionInProgress', AuctionInProgressError);

/** RefundNotAllowed: Refund not allowed */
export class RefundNotAllowedError extends ProgramError {
  readonly name: string = 'RefundNotAllowed';

  readonly code: number = 0x10; // 16

  constructor(program: Program, cause?: Error) {
    super('Refund not allowed', program, cause);
  }
}
codeToErrorMap.set(0x10, RefundNotAllowedError);
nameToErrorMap.set('RefundNotAllowed', RefundNotAllowedError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMplGavelErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMplGavelErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
