/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';
import { Amount, AmountArgs, getAmountSerializer } from '../types';

// Accounts.
export type BidInstructionAccounts = {
  /** Fair auction account */
  fairAuction: PublicKey;
  /** Bid account (pda of ['bid', fair auction id, owner id] */
  bid: PublicKey;
  /** Owner */
  owner: Signer;
  /** Payer */
  payer?: Signer;
  /** System program */
  systemProgram?: PublicKey;
};

// Data.
export type BidInstructionData = { discriminator: number; amount: Amount };

export type BidInstructionDataArgs = { amount: AmountArgs };

export function getBidInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BidInstructionDataArgs, BidInstructionData> {
  const s = context.serializer;
  return mapSerializer<BidInstructionDataArgs, any, BidInstructionData>(
    s.struct<BidInstructionData>(
      [
        ['discriminator', s.u8()],
        ['amount', getAmountSerializer(context)],
      ],
      { description: 'BidInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<BidInstructionDataArgs, BidInstructionData>;
}

// Args.
export type BidInstructionArgs = BidInstructionDataArgs;

// Instruction.
export function bid(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: BidInstructionAccounts & BidInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplGavel',
      'FairV2mqxnkNjniBpESKcF9u2sWrD3uLaP8eXcQHAgXh'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Fair Auction.
  keys.push({
    pubkey: resolvedAccounts.fairAuction,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fairAuction, true),
  });

  // Bid.
  keys.push({
    pubkey: resolvedAccounts.bid,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.bid, true),
  });

  // Owner.
  signers.push(resolvedAccounts.owner);
  keys.push({
    pubkey: resolvedAccounts.owner.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.owner, false),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Data.
  const data = getBidInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
