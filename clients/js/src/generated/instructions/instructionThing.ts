/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type InstructionThingInstructionAccounts = {
  /** signed, writable account description */
  signedWritableAccount: Signer;
  /** writable, non signed account description */
  writableAccount: PublicKey;
  /** non signed, non writable account description */
  nonWritableAccount: PublicKey;
  /** Token program */
  tokenProgram?: PublicKey;
  /** Rent sysvar */
  rent?: PublicKey;
};

// Data.
export type InstructionThingInstructionData = {
  discriminator: number;
  value: bigint;
};

export type InstructionThingInstructionDataArgs = { value: number | bigint };

export function getInstructionThingInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  InstructionThingInstructionDataArgs,
  InstructionThingInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    InstructionThingInstructionDataArgs,
    any,
    InstructionThingInstructionData
  >(
    s.struct<InstructionThingInstructionData>(
      [
        ['discriminator', s.u8()],
        ['value', s.u64()],
      ],
      { description: 'InstructionThingInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<
    InstructionThingInstructionDataArgs,
    InstructionThingInstructionData
  >;
}

// Args.
export type InstructionThingInstructionArgs =
  InstructionThingInstructionDataArgs;

// Instruction.
export function instructionThing(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: InstructionThingInstructionAccounts & InstructionThingInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplProjectName',
      'MyProgram1111111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'rent',
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Signed Writable Account.
  signers.push(resolvedAccounts.signedWritableAccount);
  keys.push({
    pubkey: resolvedAccounts.signedWritableAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.signedWritableAccount, true),
  });

  // Writable Account.
  keys.push({
    pubkey: resolvedAccounts.writableAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.writableAccount, true),
  });

  // Non Writable Account.
  keys.push({
    pubkey: resolvedAccounts.nonWritableAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.nonWritableAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // Rent.
  keys.push({
    pubkey: resolvedAccounts.rent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.rent, false),
  });

  // Data.
  const data =
    getInstructionThingInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
