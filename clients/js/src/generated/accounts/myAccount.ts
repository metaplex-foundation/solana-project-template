/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type MyAccount = Account<MyAccountAccountData>;

export type MyAccountAccountData = {
  discriminator: Array<number>;
  authority: PublicKey;
  data: Uint8Array;
};

export type MyAccountAccountDataArgs = MyAccountAccountData;

export function getMyAccountAccountDataSerializer(): Serializer<
  MyAccountAccountDataArgs,
  MyAccountAccountData
> {
  return struct<MyAccountAccountData>(
    [
      ['discriminator', array(u8(), { size: 8 })],
      ['authority', publicKeySerializer()],
      ['data', bytes({ size: 32 })],
    ],
    { description: 'MyAccountAccountData' }
  ) as Serializer<MyAccountAccountDataArgs, MyAccountAccountData>;
}

export function deserializeMyAccount(rawAccount: RpcAccount): MyAccount {
  return deserializeAccount(rawAccount, getMyAccountAccountDataSerializer());
}

export async function fetchMyAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MyAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MyAccount');
  return deserializeMyAccount(maybeAccount);
}

export async function safeFetchMyAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MyAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMyAccount(maybeAccount) : null;
}

export async function fetchAllMyAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MyAccount');
    return deserializeMyAccount(maybeAccount);
  });
}

export async function safeFetchAllMyAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMyAccount(maybeAccount as RpcAccount));
}

export function getMyAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      data: Uint8Array;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      data: [40, bytes({ size: 32 })],
    })
    .deserializeUsing<MyAccount>((account) => deserializeMyAccount(account));
}

export function getMyAccountSize(): number {
  return 72;
}
