/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';
import { AccountKey, Key, KeyArgs, getKeySerializer } from '../types';

export type Auction = Account<AuctionAccountData>;

export type AuctionAccountData = {
  key: bigint;
  authority: PublicKey;
  treasury: PublicKey;
  mint: PublicKey;
  startValue: bigint;
  tick: bigint;
  endDate: bigint;
  lowest: Key;
};

export type AuctionAccountDataArgs = {
  authority: PublicKey;
  treasury: PublicKey;
  mint: PublicKey;
  startValue: number | bigint;
  tick: number | bigint;
  endDate: number | bigint;
  lowest: KeyArgs;
};

export function getAuctionAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AuctionAccountDataArgs, AuctionAccountData> {
  const s = context.serializer;
  return mapSerializer<AuctionAccountDataArgs, any, AuctionAccountData>(
    s.struct<AuctionAccountData>(
      [
        ['key', s.u64()],
        ['authority', s.publicKey()],
        ['treasury', s.publicKey()],
        ['mint', s.publicKey()],
        ['startValue', s.u64()],
        ['tick', s.u64()],
        ['endDate', s.i64()],
        ['lowest', getKeySerializer(context)],
      ],
      { description: 'AuctionAccountData' }
    ),
    (value) => ({ ...value, key: AccountKey.Auction })
  ) as Serializer<AuctionAccountDataArgs, AuctionAccountData>;
}

export function deserializeAuction(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Auction {
  return deserializeAccount(
    rawAccount,
    getAuctionAccountDataSerializer(context)
  );
}

export async function fetchAuction(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Auction> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Auction');
  return deserializeAuction(context, maybeAccount);
}

export async function safeFetchAuction(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Auction | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeAuction(context, maybeAccount) : null;
}

export async function fetchAllAuction(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Auction[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Auction');
    return deserializeAuction(context, maybeAccount);
  });
}

export async function safeFetchAllAuction(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Auction[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAuction(context, maybeAccount as RpcAccount)
    );
}

export function getAuctionGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplGavel',
    'FairV2mqxnkNjniBpESKcF9u2sWrD3uLaP8eXcQHAgXh'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: number | bigint;
      authority: PublicKey;
      treasury: PublicKey;
      mint: PublicKey;
      startValue: number | bigint;
      tick: number | bigint;
      endDate: number | bigint;
      lowest: KeyArgs;
    }>({
      key: [0, s.u64()],
      authority: [8, s.publicKey()],
      treasury: [40, s.publicKey()],
      mint: [72, s.publicKey()],
      startValue: [104, s.u64()],
      tick: [112, s.u64()],
      endDate: [120, s.i64()],
      lowest: [128, getKeySerializer(context)],
    })
    .deserializeUsing<Auction>((account) =>
      deserializeAuction(context, account)
    )
    .whereField('key', AccountKey.Auction);
}
