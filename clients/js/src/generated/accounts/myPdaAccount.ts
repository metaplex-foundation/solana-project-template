/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type MyPdaAccount = Account<MyPdaAccountAccountData>;

export type MyPdaAccountAccountData = { key: Key; bump: number };

export type MyPdaAccountAccountDataArgs = { bump: number };

export function getMyPdaAccountAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MyPdaAccountAccountDataArgs, MyPdaAccountAccountData> {
  const s = context.serializer;
  return mapSerializer<
    MyPdaAccountAccountDataArgs,
    any,
    MyPdaAccountAccountData
  >(
    s.struct<MyPdaAccountAccountData>(
      [
        ['key', getKeySerializer(context)],
        ['bump', s.u8()],
      ],
      { description: 'MyPdaAccountAccountData' }
    ),
    (value) => ({ ...value, key: Key.MyPdaAccount })
  ) as Serializer<MyPdaAccountAccountDataArgs, MyPdaAccountAccountData>;
}

export function deserializeMyPdaAccount(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): MyPdaAccount {
  return deserializeAccount(
    rawAccount,
    getMyPdaAccountAccountDataSerializer(context)
  );
}

export async function fetchMyPdaAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'MyPdaAccount');
  return deserializeMyPdaAccount(context, maybeAccount);
}

export async function safeFetchMyPdaAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeMyPdaAccount(context, maybeAccount)
    : null;
}

export async function fetchAllMyPdaAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MyPdaAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MyPdaAccount');
    return deserializeMyPdaAccount(context, maybeAccount);
  });
}

export async function safeFetchAllMyPdaAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MyPdaAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMyPdaAccount(context, maybeAccount as RpcAccount)
    );
}

export function getMyPdaAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ key: KeyArgs; bump: number }>({
      key: [0, getKeySerializer(context)],
      bump: [1, s.u8()],
    })
    .deserializeUsing<MyPdaAccount>((account) =>
      deserializeMyPdaAccount(context, account)
    )
    .whereField('key', Key.MyPdaAccount);
}

export function getMyPdaAccountSize(): number {
  return 2;
}

export function findMyPdaAccountPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The address of the authority */
    authority: PublicKey;
    /** The name of the account */
    name: string;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('myPdaAccount'),
    programId.bytes,
    s.publicKey().serialize(seeds.authority),
    s.string({ size: 'variable' }).serialize(seeds.name),
  ]);
}

export async function fetchMyPdaAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findMyPdaAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount> {
  return fetchMyPdaAccount(
    context,
    findMyPdaAccountPda(context, seeds),
    options
  );
}

export async function safeFetchMyPdaAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findMyPdaAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount | null> {
  return safeFetchMyPdaAccount(
    context,
    findMyPdaAccountPda(context, seeds),
    options
  );
}
