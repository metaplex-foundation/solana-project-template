/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type MyPdaAccount = Account<MyPdaAccountAccountData>;

export type MyPdaAccountAccountData = {
  discriminator: Array<number>;
  bump: number;
  padding: Array<number>;
};

export type MyPdaAccountAccountDataArgs = MyPdaAccountAccountData;

export function getMyPdaAccountAccountDataSerializer(): Serializer<
  MyPdaAccountAccountDataArgs,
  MyPdaAccountAccountData
> {
  return struct<MyPdaAccountAccountData>(
    [
      ['discriminator', array(u8(), { size: 8 })],
      ['bump', u8()],
      ['padding', array(u8(), { size: 7 })],
    ],
    { description: 'MyPdaAccountAccountData' }
  ) as Serializer<MyPdaAccountAccountDataArgs, MyPdaAccountAccountData>;
}

export function deserializeMyPdaAccount(rawAccount: RpcAccount): MyPdaAccount {
  return deserializeAccount(rawAccount, getMyPdaAccountAccountDataSerializer());
}

export async function fetchMyPdaAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MyPdaAccount');
  return deserializeMyPdaAccount(maybeAccount);
}

export async function safeFetchMyPdaAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMyPdaAccount(maybeAccount) : null;
}

export async function fetchAllMyPdaAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MyPdaAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MyPdaAccount');
    return deserializeMyPdaAccount(maybeAccount);
  });
}

export async function safeFetchAllMyPdaAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MyPdaAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMyPdaAccount(maybeAccount as RpcAccount));
}

export function getMyPdaAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      bump: number;
      padding: Array<number>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      bump: [8, u8()],
      padding: [9, array(u8(), { size: 7 })],
    })
    .deserializeUsing<MyPdaAccount>((account) =>
      deserializeMyPdaAccount(account)
    );
}

export function getMyPdaAccountSize(): number {
  return 16;
}

export function findMyPdaAccountPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the authority */
    authority: PublicKey;
    /** The name of the account */
    name: string;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('myPdaAccount'),
    publicKeySerializer().serialize(programId),
    publicKeySerializer().serialize(seeds.authority),
    string().serialize(seeds.name),
  ]);
}

export async function fetchMyPdaAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMyPdaAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount> {
  return fetchMyPdaAccount(
    context,
    findMyPdaAccountPda(context, seeds),
    options
  );
}

export async function safeFetchMyPdaAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMyPdaAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<MyPdaAccount | null> {
  return safeFetchMyPdaAccount(
    context,
    findMyPdaAccountPda(context, seeds),
    options
  );
}
