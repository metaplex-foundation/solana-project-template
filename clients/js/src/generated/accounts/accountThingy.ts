/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';

export type AccountThingy = Account<AccountThingyAccountData>;

export type AccountThingyAccountData = { thing: number };

export type AccountThingyAccountDataArgs = AccountThingyAccountData;

export function getAccountThingyAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AccountThingyAccountDataArgs, AccountThingyAccountData> {
  const s = context.serializer;
  return s.struct<AccountThingyAccountData>([['thing', s.u8()]], {
    description: 'AccountThingyAccountData',
  }) as Serializer<AccountThingyAccountDataArgs, AccountThingyAccountData>;
}

export function deserializeAccountThingy(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): AccountThingy {
  return deserializeAccount(
    rawAccount,
    getAccountThingyAccountDataSerializer(context)
  );
}

export async function fetchAccountThingy(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AccountThingy> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'AccountThingy');
  return deserializeAccountThingy(context, maybeAccount);
}

export async function safeFetchAccountThingy(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AccountThingy | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeAccountThingy(context, maybeAccount)
    : null;
}

export async function fetchAllAccountThingy(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AccountThingy[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AccountThingy');
    return deserializeAccountThingy(context, maybeAccount);
  });
}

export async function safeFetchAllAccountThingy(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AccountThingy[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAccountThingy(context, maybeAccount as RpcAccount)
    );
}

export function getAccountThingyGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ thing: number }>({ thing: [0, s.u8()] })
    .deserializeUsing<AccountThingy>((account) =>
      deserializeAccountThingy(context, account)
    );
}

export function getAccountThingySize(): number {
  return 1;
}
