/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';
import { AccountKey } from '../types';

export type Bid = Account<BidAccountData>;

export type BidAccountData = { key: bigint; sequence: bigint; value: bigint };

export type BidAccountDataArgs = {
  sequence: number | bigint;
  value: number | bigint;
};

export function getBidAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BidAccountDataArgs, BidAccountData> {
  const s = context.serializer;
  return mapSerializer<BidAccountDataArgs, any, BidAccountData>(
    s.struct<BidAccountData>(
      [
        ['key', s.u64()],
        ['sequence', s.u64()],
        ['value', s.u64()],
      ],
      { description: 'BidAccountData' }
    ),
    (value) => ({ ...value, key: AccountKey.Bid })
  ) as Serializer<BidAccountDataArgs, BidAccountData>;
}

export function deserializeBid(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Bid {
  return deserializeAccount(rawAccount, getBidAccountDataSerializer(context));
}

export async function fetchBid(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Bid> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Bid');
  return deserializeBid(context, maybeAccount);
}

export async function safeFetchBid(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Bid | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeBid(context, maybeAccount) : null;
}

export async function fetchAllBid(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Bid[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Bid');
    return deserializeBid(context, maybeAccount);
  });
}

export async function safeFetchAllBid(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Bid[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBid(context, maybeAccount as RpcAccount));
}

export function getBidGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplGavel',
    'FairV2mqxnkNjniBpESKcF9u2sWrD3uLaP8eXcQHAgXh'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: number | bigint;
      sequence: number | bigint;
      value: number | bigint;
    }>({ key: [0, s.u64()], sequence: [8, s.u64()], value: [16, s.u64()] })
    .deserializeUsing<Bid>((account) => deserializeBid(context, account))
    .whereField('key', AccountKey.Bid);
}

export function getBidSize(): number {
  return 24;
}
